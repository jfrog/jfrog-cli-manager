name: E2E Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      platform:
        description: 'Platform to test on'
        required: false
        default: 'all'
        type: choice
        options:
        - all
        - ubuntu
        - macos

env:
  GO_VERSION: '1.23'
  JFVM_PATH: ${{ github.workspace }}/jfvm

jobs:
  test-ubuntu:
    name: E2E Tests - Ubuntu
    runs-on: ubuntu-latest
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'ubuntu' || github.event.inputs.platform == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Build jfvm
      run: |
        echo "Building jfvm for Ubuntu..."
        go build -o jfvm .
        chmod +x jfvm
        ./jfvm --version

    - name: Set up jfvm environment
      run: |
        echo "Setting up jfvm environment..."
        # Install a test version
        ./jfvm install 2.74.0
        # Use the version to create the shim
        ./jfvm use 2.74.0
        # Add shim to PATH
        echo "$HOME/.jfvm/shim" >> $GITHUB_PATH
        # Verify shim is working
        export PATH="$HOME/.jfvm/shim:$PATH"
        which jf
        jf --version

    - name: Run E2E tests
      env:
        JFVM_PATH: ${{ github.workspace }}/jfvm
      run: |
        echo "Running E2E tests on Ubuntu..."
        export PATH="$HOME/.jfvm/shim:$PATH"
        chmod +x tests/e2e/run_ci_tests.sh
        ./tests/e2e/run_ci_tests.sh

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-ubuntu
        path: test-results-ubuntu.json
        retention-days: 7

    - name: Test summary
      if: always()
      run: |
        echo "=== Ubuntu Test Summary ==="
        if [ -f test-results-ubuntu.json ]; then
          echo "Test results saved to artifacts"
        else
          echo "No test results file found"
        fi

  test-macos:
    name: E2E Tests - macOS
    runs-on: macos-latest
    if: github.event.inputs.platform == 'all' || github.event.inputs.platform == 'macos' || github.event.inputs.platform == ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Build jfvm
      run: |
        echo "Building jfvm for macOS..."
        go build -o jfvm .
        chmod +x jfvm
        ./jfvm --version

    - name: Set up jfvm environment
      run: |
        echo "Setting up jfvm environment..."
        # Install a test version
        ./jfvm install 2.74.0
        # Use the version to create the shim
        ./jfvm use 2.74.0
        # Add shim to PATH
        echo "$HOME/.jfvm/shim" >> $GITHUB_PATH
        # Verify shim is working
        export PATH="$HOME/.jfvm/shim:$PATH"
        which jf
        jf --version

    - name: Run E2E tests
      env:
        JFVM_PATH: ${{ github.workspace }}/jfvm
      run: |
        echo "Running E2E tests on macOS..."
        export PATH="$HOME/.jfvm/shim:$PATH"
        chmod +x tests/e2e/run_ci_tests.sh
        ./tests/e2e/run_ci_tests.sh

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-macos
        path: test-results-macos.json
        retention-days: 7

    - name: Test summary
      if: always()
      run: |
        echo "=== macOS Test Summary ==="
        if [ -f test-results-macos.json ]; then
          echo "Test results saved to artifacts"
        else
          echo "No test results file found"
        fi

  test-coverage:
    name: Test Coverage Report
    runs-on: ubuntu-latest
    needs: [test-ubuntu, test-macos]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Download test artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-results/

    - name: Generate coverage report
      run: |
        echo "Generating test coverage report..."
        mkdir -p coverage-reports
        
        # Process Ubuntu results
        if [ -f test-results/test-results-ubuntu/test-results-ubuntu.json ]; then
          echo "Processing Ubuntu test results..."
          # Add coverage processing logic here
        fi
        
        # Process macOS results
        if [ -f test-results/test-results-macos/test-results-macos.json ]; then
          echo "Processing macOS test results..."
          # Add coverage processing logic here
        fi

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage-reports/
        retention-days: 30

  test-performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: Build jfvm
      run: |
        go build -o jfvm .
        chmod +x jfvm

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        go test -v -timeout 10m ./tests/e2e/ -run TestPerformance

    - name: Performance summary
      run: |
        echo "=== Performance Test Summary ==="
        echo "Performance tests completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        echo "Running security scan..."
        # Add security scanning tools here
        echo "Security scan completed"

  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [test-ubuntu, test-macos, test-coverage]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "=== E2E Test Results Summary ==="
        
        # Check if all required jobs succeeded
        if [[ "${{ needs.test-ubuntu.result }}" == "success" && "${{ needs.test-macos.result }}" == "success" ]]; then
          echo "✅ All E2E tests passed!"
          echo "::set-output name=status::success"
        else
          echo "❌ Some E2E tests failed!"
          echo "Ubuntu: ${{ needs.test-ubuntu.result }}"
          echo "macOS: ${{ needs.test-macos.result }}"
          echo "::set-output name=status::failure"
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('E2E Test Results')
          );
          
          const status = '${{ needs.test-ubuntu.result }}' === 'success' && '${{ needs.test-macos.result }}' === 'success' ? '✅ PASSED' : '❌ FAILED';
          
          const commentBody = `## E2E Test Results ${status}
          
          **Platform Results:**
          - Ubuntu: ${{ needs.test-ubuntu.result }}
          - macOS: ${{ needs.test-macos.result }}
          
          **Coverage:** ${{ needs.test-coverage.result }}
          
          [View full results](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              comment_id: botComment.id,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody,
            });
          } 