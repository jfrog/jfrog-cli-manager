name: Test Homebrew Installation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-brew-installation:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Set up shell environment
        run: |
          # Ensure we're using the right shell for CI
          echo "=== Setting up shell environment ==="
          echo "Default shell: $SHELL"
          echo "Current shell: $(basename $SHELL)"
          
          # GitHub Actions uses bash by default
          # On macOS, the system might have zsh as default, but we'll use bash for CI
          echo "Using bash for CI environment"
          export SHELL=/bin/bash
          
          echo "Final shell: $SHELL"

      - name: Install jfvm via Homebrew
        run: |
          # Debug: Check shell environment
          echo "=== Shell Environment Check ==="
          echo "SHELL: $SHELL"
          echo "Shell name: $(basename $SHELL)"
          echo "Available shells:"
          cat /etc/shells || echo "Cannot read /etc/shells"
          
          # Add the jfrog tap
          brew tap jfrog/jfrog-cli-vm
          
          # Install jfvm
          brew install jfvm
          
          # Verify installation
          jfvm --version

      - name: Install test jf binary
        run: |
          # Install a test version of jf for testing
          jfvm install 2.74.0
          
          # Verify jf binary exists
          ls -la ~/.jfvm/versions/2.74.0/jf
          
          # Test the binary directly
          ~/.jfvm/versions/2.74.0/jf --version

          jfvm health-check --fix --verbose

      - name: Setup shell environment
        run: |
          # Debug: Show shell information
          echo "=== Shell Information ==="
          echo "Current shell: $SHELL"
          echo "Shell name: $(basename $SHELL)"
          echo "Current PATH: $PATH"
          
          # Detect and source the appropriate shell profile
          # Prioritize bash profiles for CI environment
          if [ -f ~/.bashrc ]; then
            echo "Found .bashrc, sourcing it..."
            source ~/.bashrc
          elif [ -f ~/.bash_profile ]; then
            echo "Found .bash_profile, sourcing it..."
            source ~/.bash_profile
          elif [ -f ~/.zshrc ]; then
            echo "Found .zshrc, sourcing it as fallback..."
            source ~/.zshrc
          else
            echo "No shell profile found, continuing without sourcing..."
          fi
          
          # Export jfvm PATH manually for CI environment
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Verify jfvm is in PATH
          echo "PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfvm || echo "No jfvm entries found"
          
          # Test jfvm command
          jfvm --version

      - name: Test basic functionality
        run: |
          # Test help command
          jfvm --help
          
          # Test list command
          jfvm list
          
          # Test health check
          jfvm health-check

      - name: Test enhanced priority system
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Use the version
          jfvm use 2.74.0
          
          # Verify which jf is being used
          which jf
          
          # Test jf execution
          jf --version
          
          # Run health check to verify priority
          jfvm health-check --verbose

      - name: Test health check with fixes
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Test health check with fix flag
          jfvm health-check --fix
          
          # Verify PATH configuration
          echo "PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfvm || echo "No jfvm entries found"
          
          # Test which jf again
          which jf
          
          # Test jf execution again
          jf --version

      - name: Test latest version functionality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Test using latest version
          jfvm use latest
          
          # Verify latest version is active
          jf --version
          
          # Check health status
          jfvm health-check

      - name: Test alias functionality
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Create an alias
          jfvm alias set test-alias 2.74.0
          
          # Use the alias
          jfvm use test-alias
          
          # Verify alias works
          jf --version

      - name: Test project-specific version
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Create a .jfrog-version file
          echo "2.74.0" > .jfrog-version
          
          # Use without arguments (should read from .jfrog-version)
          jfvm use
          
          # Verify correct version is active
          jf --version
          
          # Clean up
          rm .jfrog-version

      - name: Test performance and security checks
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Test health check with performance and security flags
          jfvm health-check --performance --security --verbose

      - name: Test error handling
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Test using non-existent version
          jfvm use non-existent-version || echo "Expected error for non-existent version"
          
          # Test using invalid alias
          jfvm use invalid-alias || echo "Expected error for invalid alias"

      - name: Verify final state
        run: |
          # Ensure jfvm PATH is loaded
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Final health check
          jfvm health-check
          
          # List installed versions
          jfvm list
          
          # Show which jf is active
          which jf
          jf --version
          
          # Show PATH entries
          echo "Final PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfvm || echo "No jfvm entries found"

      - name: Cleanup
        if: always()
        run: |
          # Uninstall jfvm
          brew uninstall jfvm || true
          
          # Remove tap
          brew untap jfrog/jfrog-cli-vm || true 