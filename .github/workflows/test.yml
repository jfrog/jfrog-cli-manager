name: Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run unit tests
        run: |
          # Run unit tests only (exclude E2E tests that require built binary)
          go test -v ./cmd/... ./internal/...

  test-e2e-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build jfvm
        run: |
          make build-release
          chmod +x jfvm



      - name: Run E2E tests
        env:
          JFVM_PATH: ${{ github.workspace }}/jfvm
          TEST_TIMEOUT: "10m"
        run: |
          go test -v -timeout 10m ./tests/e2e/...

  test-e2e-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build jfvm
        run: |
          make build-release
          chmod +x jfvm

      - name: Test enhanced priority system
        env:
          JFVM_PATH: ${{ github.workspace }}/jfvm
        run: |
          # Install a test version
          ./jfvm install 2.74.0
          
          # Use the version
          ./jfvm use 2.74.0
          
          # Export jfvm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Verify which jf is being used
          which jf
          
          # Test jf execution
          jf --version
          
          # Run health check to verify priority
          ./jfvm health-check --verbose

      - name: Test health check with fixes
        env:
          JFVM_PATH: ${{ github.workspace }}/jfvm
        run: |
          # Test health check with fix flag
          ./jfvm health-check --fix
          
          # Export jfvm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Verify PATH configuration
          echo "PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfvm || echo "No jfvm entries found"
          
          # Test which jf again
          which jf
          
          # Final health check
          ./jfvm health-check

      - name: Run E2E tests
        env:
          JFVM_PATH: ${{ github.workspace }}/jfvm
          TEST_TIMEOUT: "10m"
        run: |
          go test -v -timeout 10m ./tests/e2e/...

  test-brew-installation:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install jfvm via Homebrew
        run: |
          # Add the jfrog tap
          brew tap jfrog/jfrog-cli-vm
          
          # Install jfvm
          brew install jfvm
          
          # Verify installation
          jfvm --version

      - name: Test enhanced priority system
        run: |
          # Install a test version
          jfvm install 2.74.0
          
          # Use the version
          jfvm use 2.74.0
          
          # Export jfvm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Verify which jf is being used
          which jf
          
          # Test jf execution
          jf --version
          
          # Run health check to verify priority
          jfvm health-check --verbose

      - name: Test health check with fixes
        run: |
          # Test health check with fix flag
          jfvm health-check --fix
          
          # Export jfvm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfvm/shim:$PATH"
          
          # Verify PATH configuration
          echo "PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfvm || echo "No jfvm entries found"
          
          # Test which jf again
          which jf
          
          # Final health check
          jfvm health-check

      - name: Test latest version functionality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Clean profile to original content
          if [ -f /Users/runner/.bash_profile ]; then
            echo "Cleaning .bash_profile to original content..."
            cp /Users/runner/.bash_profile /Users/runner/.bash_profile.jfvm.backup
            echo '[ -f $HOME/.bashrc ] && source $HOME/.bashrc' > /Users/runner/.bash_profile
            echo '' >> /Users/runner/.bash_profile
            echo 'PERFLOG_LOCATION_SETTING=RUNNER_PERFLOG' >> /Users/runner/.bash_profile
            echo 'POWERSHELL_DISTRIBUTION_CHANNEL=GitHub-Actions-macos14' >> /Users/runner/.bash_profile
            echo "Profile cleaned"
          fi

          cat /Users/runner/.bash_profile
          source ~/.bash_profile

          # Test using a specific version instead of latest to avoid API issues
          jfvm use 2.77.0

          cat /Users/runner/.bash_profile
          source ~/.bash_profile
          
          # Verify latest version is active
          jf --version
          

      - name: Test performance and security checks
        run: |
          # Test health check with performance and security flags
          jfvm health-check --performance --security --verbose

      - name: Cleanup
        if: always()
        run: |
          # Uninstall jfvm
          brew uninstall jfvm || true
          
          # Remove tap
          brew untap jfrog/jfrog-cli-vm || true

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e-ubuntu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build and test integration
        run: |
          make build-release
          chmod +x jfvm
          
          # Test basic functionality
          ./jfvm --help
          ./jfvm list
          ./jfvm health-check
          
          # Test that binary works correctly
          ./jfvm --version

  upload-artifacts:
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e-ubuntu, test-e2e-macos, test-brew-installation, test-integration]
    if: always()
    steps:
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results-*.json
            coverage-reports/
          retention-days: 7 