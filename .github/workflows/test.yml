name: Test Suite

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test-unit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Run unit tests
        run: |
          # Run unit tests only (exclude E2E tests that require built binary)
          go test -v ./cmd/... ./internal/...

  test-e2e-ubuntu:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build jfcm
        run: |
          make build-release
          chmod +x jfcm



      - name: Run E2E tests
        env:
          jfcm_PATH: ${{ github.workspace }}/jfcm
          TEST_TIMEOUT: "10m"
        run: |
          go test -v -timeout 10m ./tests/e2e/...

  test-e2e-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build jfcm
        run: |
          make build-release
          chmod +x jfcm

      - name: Test enhanced priority system
        env:
          jfcm_PATH: ${{ github.workspace }}/jfcm
        run: |
          # Install a test version
          ./jfcm install 2.74.0
          
          # Use the version
          ./jfcm use 2.74.0
          
          # Export jfcm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfcm/shim:$PATH"
          
          # Verify which jf is being used
          which jf
          
          # Test jf execution
          jf --version
          
          # Run health check to verify priority
          ./jfcm health-check --verbose

      - name: Test health check with fixes
        env:
          jfcm_PATH: ${{ github.workspace }}/jfcm
        run: |
          # Test health check with fix flag
          ./jfcm health-check --fix
          
          # Export jfcm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfcm/shim:$PATH"
          
          # Verify PATH configuration
          echo "PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfcm || echo "No jfcm entries found"
          
          # Test which jf again
          which jf
          
          # Final health check
          ./jfcm health-check

      - name: Run E2E tests
        env:
          jfcm_PATH: ${{ github.workspace }}/jfcm
          TEST_TIMEOUT: "10m"
        run: |
          go test -v -timeout 10m ./tests/e2e/...

  test-brew-installation:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Homebrew
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install jfcm via Homebrew
        run: |
          # Add the jfrog tap
          brew tap jfrog/jfrog-cli-vm
          
          # Install jfcm
          brew install jfcm
          
          # Verify installation
          jfcm --version

      - name: Test enhanced priority system
        run: |
          # Install a test version
          jfcm install 2.74.0
          
          # Use the version
          jfcm use 2.74.0
          
          # Export jfcm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfcm/shim:$PATH"
          
          # Verify which jf is being used
          which jf
          
          # Test jf execution
          jf --version
          
          # Run health check to verify priority
          jfcm health-check --verbose

      - name: Test health check with fixes
        run: |
          # Test health check with fix flag
          jfcm health-check --fix
          
          # Export jfcm shim to PATH directly (avoid shell profile issues)
          export PATH="$HOME/.jfcm/shim:$PATH"
          
          # Verify PATH configuration
          echo "PATH entries:"
          echo $PATH | tr ':' '\n' | grep jfcm || echo "No jfcm entries found"
          
          # Test which jf again
          which jf
          
          # Final health check
          jfcm health-check

      - name: Test latest version functionality
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Test using a specific version instead of latest to avoid API issues
          jfcm use 2.77.0
          
          # Fix PATH configuration and source the profile
          jfcm health-check --fix
          source ~/.bash_profile
          
          # Verify latest version is active
          jf --version
          

      - name: Test performance and security checks
        run: |
          # Test health check with performance and security flags
          jfcm health-check --performance --security --verbose

      - name: Cleanup
        if: always()
        run: |
          # Uninstall jfcm
          brew uninstall jfcm || true
          
          # Remove tap
          brew untap jfrog/jfrog-cli-vm || true

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e-ubuntu]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Build and test integration
        run: |
          make build-release
          chmod +x jfcm
          
          # Test basic functionality
          ./jfcm --help
          ./jfcm list
          ./jfcm health-check
          
          # Test that binary works correctly
          ./jfcm --version

  upload-artifacts:
    runs-on: ubuntu-latest
    needs: [test-unit, test-e2e-ubuntu, test-e2e-macos, test-brew-installation, test-integration]
    if: always()
    steps:
      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results-*.json
            coverage-reports/
          retention-days: 7 