name: Release jfvm

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g. v2.0.0)'
        required: true
        type: string

permissions:
  contents: write

env:
  GO_VERSION: '1.23'

jobs:
  validate:
    name: Validate inputs and environment
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.validate.outputs.tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Validate tag format and determine release tag
        id: validate
        env:
          GITHUB_EVENT_NAME: ${{ github.event_name }}
          INPUT_TAG: ${{ github.event.inputs.tag }}
        run: ./.github/scripts/validate-tag.sh

  build:
    name: Build binaries
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      fail-fast: false
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5.0.1
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Verify Go installation and dependencies
        run: |
          echo "Go version: $(go version)"
          echo "Checking go.mod..."
          go mod verify
          go mod tidy -v
          echo "‚úÖ Dependencies verified"
          
      - name: Install required tools
        run: |
          sudo apt-get update && sudo apt-get install -y zip unzip
          
      - name: Build binary
        id: build
        run: |
          ./.github/scripts/build-binary.sh \
            "${{ needs.validate.outputs.tag }}" \
            "${{ matrix.goos }}" \
            "${{ matrix.goarch }}"
          
      - name: Package and generate checksums
        run: |
          ./.github/scripts/package-artifacts.sh \
            "${{ needs.validate.outputs.tag }}" \
            "${{ matrix.goos }}" \
            "${{ matrix.goarch }}" \
            "${{ steps.build.outputs.binary_path }}"
          
      - name: Add build summary
        run: |
          echo "‚úÖ Built ${{ matrix.goos }}/${{ matrix.goarch }} - Size: ${{ steps.build.outputs.binary_size }} bytes"
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4.6.2
        with:
          name: "artifacts-${{ matrix.goos }}-${{ matrix.goarch }}"
          path: |
            jfvm-${{ needs.validate.outputs.tag }}-${{ matrix.goos }}-${{ matrix.goarch }}*
          if-no-files-found: error
          retention-days: 30

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all build artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          pattern: artifacts-*
          merge-multiple: true
          
      - name: Verify downloaded artifacts
        id: verify
        run: |
          set -euo pipefail
          
          VERSION="${{ needs.validate.outputs.tag }}"
          echo "üîç Verifying downloaded artifacts for release $VERSION"
          
          # List all downloaded files
          echo "üìã Downloaded files:"
          ls -la . || {
            echo "‚ùå Error: No files downloaded"
            exit 1
          }
          
          # Check that we have files for each expected platform/arch combination
          EXPECTED_PLATFORMS=("linux-amd64" "linux-arm64" "darwin-amd64" "darwin-arm64" "windows-amd64")
          
          for platform in "${EXPECTED_PLATFORMS[@]}"; do
            echo "Checking platform: $platform"
            
            if [[ "$platform" == "windows-amd64" ]]; then
              # Windows files
              if [[ ! -f "jfvm-${VERSION}-${platform}.zip" ]]; then
                echo "‚ùå Error: Missing Windows ZIP: jfvm-${VERSION}-${platform}.zip"
                exit 1
              fi
              if [[ ! -f "jfvm-${VERSION}-${platform}.exe" ]]; then
                echo "‚ùå Error: Missing Windows binary: jfvm-${VERSION}-${platform}.exe"
                exit 1
              fi
            else
              # Unix files
              if [[ ! -f "jfvm-${VERSION}-${platform}.tar.gz" ]]; then
                echo "‚ùå Error: Missing Unix tar.gz: jfvm-${VERSION}-${platform}.tar.gz"
                exit 1
              fi
              if [[ ! -f "jfvm-${VERSION}-${platform}" ]]; then
                echo "‚ùå Error: Missing Unix binary: jfvm-${VERSION}-${platform}"
                exit 1
              fi
            fi
          done
          
          # Count total files
          TOTAL_FILES=$(ls -1 jfvm-${VERSION}-* | wc -l)
          echo "‚úÖ Found $TOTAL_FILES release files"
          echo "total_files=$TOTAL_FILES" >> $GITHUB_OUTPUT
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.tag }}
          name: "jfvm ${{ needs.validate.outputs.tag }}"
          files: |
            jfvm-${{ needs.validate.outputs.tag }}-*.tar.gz
            jfvm-${{ needs.validate.outputs.tag }}-*.tar.gz.sha256
            jfvm-${{ needs.validate.outputs.tag }}-*.zip
            jfvm-${{ needs.validate.outputs.tag }}-*.zip.sha256
            jfvm-${{ needs.validate.outputs.tag }}-linux-*
            jfvm-${{ needs.validate.outputs.tag }}-linux-*.sha256
            jfvm-${{ needs.validate.outputs.tag }}-darwin-*
            jfvm-${{ needs.validate.outputs.tag }}-darwin-*.sha256
            jfvm-${{ needs.validate.outputs.tag }}-windows-*.exe
            jfvm-${{ needs.validate.outputs.tag }}-windows-*.exe.sha256
          generate_release_notes: true
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.tag, '-') }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fail_on_unmatched_files: true
          
      - name: Add release summary
        run: |
          echo "‚úÖ Released ${{ needs.validate.outputs.tag }} with ${{ steps.verify.outputs.total_files }} files"

  homebrew_formula:
    name: Generate Homebrew formula
    runs-on: ubuntu-latest
    needs: [validate, release]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download artifacts for Homebrew formula
        uses: actions/download-artifact@v4.1.7
        with:
          pattern: artifacts-*
          merge-multiple: true
          
      - name: Extract checksums and generate formula
        id: formula
        run: |
          set -euo pipefail
          
          TAG="${{ needs.validate.outputs.tag }}"
          echo "üîç Extracting checksums for Homebrew formula generation"
          
          # Extract checksums with error checking
          DARWIN_AMD_SHA="$(awk '{print $1}' "jfvm-${TAG}-darwin-amd64.tar.gz.sha256")"
          DARWIN_ARM_SHA="$(awk '{print $1}' "jfvm-${TAG}-darwin-arm64.tar.gz.sha256")"
          LINUX_AMD_SHA="$(awk '{print $1}' "jfvm-${TAG}-linux-amd64.tar.gz.sha256")"
          LINUX_ARM_SHA="$(awk '{print $1}' "jfvm-${TAG}-linux-arm64.tar.gz.sha256")"
          
          # Generate formula
          ./.github/scripts/generate-homebrew-formula.sh \
            "$TAG" \
            "${{ github.repository }}" \
            "$DARWIN_AMD_SHA" \
            "$DARWIN_ARM_SHA" \
            "$LINUX_AMD_SHA" \
            "$LINUX_ARM_SHA"
          
      - name: Add Homebrew summary
        run: |
          echo "‚úÖ Generated Homebrew formula for ${{ needs.validate.outputs.tag }}"
          
      - name: Upload Homebrew formula
        uses: actions/upload-artifact@v4.6.2
        with:
          name: homebrew-formula
          path: jfvm.rb
          retention-days: 90