name: Release jfvm to Homebrew

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g. v2.0.0)'
        required: true

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.24'

      - name: Determine tag to release
        id: tag
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "Detected manual run"
            TAG="${{ github.event.inputs.tag }}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Using manual tag: $TAG"
          else
            echo "Detected tag push"
            TAG="${GITHUB_REF#refs/tags/}"
            echo "tag=$TAG" >> $GITHUB_OUTPUT
            echo "Using pushed tag: $TAG"
          fi

      - name: Build binaries for all platforms
        run: |
          mkdir -p dist
          
          # Build for macOS AMD64 (Intel)
          echo "Building macOS AMD64 (Intel) binary..."
          GOOS=darwin GOARCH=amd64 go build -o jfvm .
          tar -czf dist/jfvm-${{ steps.tag.outputs.tag }}-darwin-amd64.tar.gz jfvm
          
          # Build for macOS ARM64 (Apple Silicon)
          echo "Building macOS ARM64 (Apple Silicon) binary..."
          GOOS=darwin GOARCH=arm64 go build -o jfvm .
          tar -czf dist/jfvm-${{ steps.tag.outputs.tag }}-darwin-arm64.tar.gz jfvm
          
          # Build for Linux AMD64 (Intel)
          echo "Building Linux AMD64 (Intel) binary..."
          GOOS=linux GOARCH=amd64 go build -o jfvm .
          tar -czf dist/jfvm-${{ steps.tag.outputs.tag }}-linux-amd64.tar.gz jfvm
          
          # Build for Linux ARM64 (ARM)
          echo "Building Linux ARM64 (ARM) binary..."
          GOOS=linux GOARCH=arm64 go build -o jfvm .
          tar -czf dist/jfvm-${{ steps.tag.outputs.tag }}-linux-arm64.tar.gz jfvm
          
      - name: Create or Update Release
        run: |
          # Check if release already exists
          if gh release view ${{ steps.tag.outputs.tag }} >/dev/null 2>&1; then
            echo "Release ${{ steps.tag.outputs.tag }} already exists, uploading files..."
            gh release upload ${{ steps.tag.outputs.tag }} \
              dist/jfvm-${{ steps.tag.outputs.tag }}-darwin-amd64.tar.gz \
              dist/jfvm-${{ steps.tag.outputs.tag }}-darwin-arm64.tar.gz \
              dist/jfvm-${{ steps.tag.outputs.tag }}-linux-amd64.tar.gz \
              dist/jfvm-${{ steps.tag.outputs.tag }}-linux-arm64.tar.gz \
              --clobber
          else
            echo "Creating new release ${{ steps.tag.outputs.tag }}..."
            gh release create ${{ steps.tag.outputs.tag }} \
              --title "jfvm ${{ steps.tag.outputs.tag }}" \
              --notes "## What's New
            
          This release includes:
          - Multi-platform support (macOS ARM64/AMD64, Linux ARM64/AMD64)
          - JFrog CLI version management
          - Homebrew integration
          
          ## Downloads
          
          Platform-specific binaries are available for:
          - macOS (Intel and Apple Silicon)
          - Linux (Intel and ARM)" \
              --draft=false \
              --prerelease=false \
              dist/jfvm-${{ steps.tag.outputs.tag }}-darwin-amd64.tar.gz \
              dist/jfvm-${{ steps.tag.outputs.tag }}-darwin-arm64.tar.gz \
              dist/jfvm-${{ steps.tag.outputs.tag }}-linux-amd64.tar.gz \
              dist/jfvm-${{ steps.tag.outputs.tag }}-linux-arm64.tar.gz
          fi



