name: Publish Homebrew Formula

on:
  workflow_run:
    workflows: ["Release jfvm to Homebrew"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}

    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: jfrog/homebrew-jfrog-cli-vm
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Get tag and download tar.gz
        id: get_tag
        run: |
          echo "=== Getting tag and downloading tar.gz ==="
          
          # Get the tag from the triggering workflow
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            # For workflow_run, get the highest version tag from GitHub API
            TAG=$(curl -s "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[0].tag_name')
            echo "Highest version tag from GitHub API: $TAG"
          else
            # For manual dispatch, use the input tag
            TAG="${{ github.event.inputs.tag }}"
            echo "Manual trigger tag: $TAG"
          fi
          
          if [ -z "$TAG" ] || [ "$TAG" = "null" ]; then
            echo "Error: No tag found"
            exit 1
          fi
          
          echo "Using tag: $TAG"
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          # Extract version without 'v' prefix
          VERSION=${TAG#v}
          echo "Version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Download tar.gz and calculate SHA256
          echo "Downloading tar.gz and calculating SHA256..."
          TAR_URL="https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-${TAG}.tar.gz"
          echo "Downloading from: $TAR_URL"
          
          if curl -L -f -o "jfvm-${TAG}.tar.gz" "$TAR_URL"; then
            SHA256=$(sha256sum "jfvm-${TAG}.tar.gz" | cut -d' ' -f1)
            echo "Tar.gz SHA256: $SHA256"
            echo "sha256=$SHA256" >> $GITHUB_OUTPUT
          else
            echo "Error: Failed to download tar.gz"
            exit 1
          fi
          
          # Generate the formula using tar.gz
          echo "Generating jfvm.rb formula..."
          cat > jfvm.rb << EOF
          class Jfvm < Formula
            desc "JFrog CLI Version Manager"
            homepage "https://github.com/${{ github.repository }}"
            version "${VERSION}"
            
            url "https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-${TAG}.tar.gz"
            sha256 "${SHA256}"
            
            def install
              bin.install "jfvm-#{OS.mac? ? 'darwin' : 'linux'}-#{Hardware::CPU.arm? ? 'arm64' : 'amd64'}" => "jfvm"
            end
            
            test do
              system "#{bin}/jfvm", "--version"
            end
          end
          EOF
          
          echo "Formula generated successfully:"
          cat jfvm.rb

      - name: Move and commit formula
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          echo "=== Moving and committing formula ==="
          mkdir -p Formula
          mv jfvm.rb Formula/jfvm.rb
          echo "Formula moved to Formula/jfvm.rb"
          
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          echo "Adding file to git..."
          git add Formula/jfvm.rb     
          echo "Committing changes..."
          git commit -m "Update jfvm formula for ${{ steps.get_tag.outputs.tag }}"
          
          echo "Setting remote URL..."
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/jfrog/homebrew-jfrog-cli-vm.git
          
          echo "Pushing to main branch..."
          git push origin main
          
          echo "=== Formula published successfully! ==="