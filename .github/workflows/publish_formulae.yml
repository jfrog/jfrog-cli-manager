name: Publish Homebrew Formula

on:
  workflow_run:
    workflows: ["Release jfvm to Homebrew"]
    types:
      - completed
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g., v1.0.0)'
        required: true
        type: string

permissions:
  contents: write
  actions: read

jobs:
  publish:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    env:
      RELEASE_TAG: ${{ github.event.inputs.tag || github.event.workflow_run.head_branch }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout tap repository
        uses: actions/checkout@v4
        with:
          repository: jfrog/homebrew-jfrog-cli-vm
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository }}
          token: ${{ secrets.HOMEBREW_TAP_TOKEN }}

      - name: Generate Homebrew formula
        run: |
          echo "=== Generating Homebrew formula ==="
          echo "RELEASE_TAG: ${{ env.RELEASE_TAG }}"
          
          # Get the latest release info
          TAG="${{ env.RELEASE_TAG }}"
          if [ -z "$TAG" ] || [ "$TAG" = "refs/heads/main" ] || [ "$TAG" = "main" ]; then
            echo "No valid tag provided, getting latest tag..."
            TAG=$(git describe --tags --abbrev=0)
          fi
          
          echo "Using tag: $TAG"
          
          # Extract version without 'v' prefix
          VERSION=${TAG#v}
          echo "Version: $VERSION"
          
          # Download binaries and calculate SHA256
          echo "Downloading binaries and calculating SHA256..."
          
          # Download binaries and calculate SHA256 with error handling
          echo "Downloading binaries and calculating SHA256..."
          
          # Function to download and verify binary
          download_binary() {
            local platform=$1
            local url="https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-${platform}"
            echo "Downloading ${platform} binary..."
            if curl -L -f -o "jfvm-${platform}" "$url"; then
              local sha256=$(sha256sum "jfvm-${platform}" | cut -d' ' -f1)
              echo "${platform} SHA256: $sha256"
              echo "SHA256_${platform//-/_}" >> /tmp/sha256_values
              echo "$sha256" >> /tmp/sha256_values
            else
              echo "Error: Failed to download ${platform} binary"
              exit 1
            fi
          }
          
          # Download all binaries
          download_binary "darwin-arm64"
          download_binary "darwin-amd64"
          download_binary "linux-arm64"
          download_binary "linux-amd64"
          
          # Read SHA256 values
          SHA256_DARWIN_ARM64=$(grep -A1 "SHA256_darwin_arm64" /tmp/sha256_values | tail -1)
          SHA256_DARWIN_AMD64=$(grep -A1 "SHA256_darwin_amd64" /tmp/sha256_values | tail -1)
          SHA256_LINUX_ARM64=$(grep -A1 "SHA256_linux_arm64" /tmp/sha256_values | tail -1)
          SHA256_LINUX_AMD64=$(grep -A1 "SHA256_linux_amd64" /tmp/sha256_values | tail -1)
          
          # Test binaries work
          echo "Testing binaries..."
          chmod +x jfvm-*
          if ! ./jfvm-darwin-amd64 --version; then
            echo "Error: macOS AMD64 binary test failed"
            exit 1
          fi
          if ! ./jfvm-linux-amd64 --version; then
            echo "Error: Linux AMD64 binary test failed"
            exit 1
          fi
          
          # Generate the formula with real SHA256 values
          echo "Generating jfvm.rb formula..."
          cat > jfvm.rb << EOF
          class Jfvm < Formula
            desc "JFrog CLI Version Manager"
            homepage "https://github.com/${{ github.repository }}"
            version "${VERSION}"
            
            if OS.mac?
              if Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-darwin-arm64"
                sha256 "${SHA256_DARWIN_ARM64}"
              else
                url "https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-darwin-amd64"
                sha256 "${SHA256_DARWIN_AMD64}"
              end
            elsif OS.linux?
              if Hardware::CPU.arm?
                url "https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-linux-arm64"
                sha256 "${SHA256_LINUX_ARM64}"
              else
                url "https://github.com/${{ github.repository }}/releases/download/${TAG}/jfvm-linux-amd64"
                sha256 "${SHA256_LINUX_AMD64}"
              end
            end
            
            def install
              bin.install "jfvm-#{OS.mac? ? 'darwin' : 'linux'}-#{Hardware::CPU.arm? ? 'arm64' : 'amd64'}" => "jfvm"
            end
            
            test do
              system "#{bin}/jfvm", "--version"
            end
          end
          EOF
          
          echo "Formula generated successfully:"
          cat jfvm.rb

      - name: Move and commit formula
        env:
          GH_TOKEN: ${{ secrets.HOMEBREW_TAP_TOKEN }}
        run: |
          echo "=== Moving and committing formula ==="
          mkdir -p Formula
          mv jfvm.rb Formula/jfvm.rb
          echo "Formula moved to Formula/jfvm.rb"
          
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          echo "Adding file to git..."
          git add Formula/jfvm.rb     
          echo "Committing changes..."
          git commit -m "Update jfvm formula for ${{ env.RELEASE_TAG }}"
          
          echo "Setting remote URL..."
          git remote set-url origin https://x-access-token:${GH_TOKEN}@github.com/jfrog/homebrew-jfrog-cli-vm.git
          
          echo "Pushing to main branch..."
          git push origin main
          
          echo "=== Formula published successfully! ==="